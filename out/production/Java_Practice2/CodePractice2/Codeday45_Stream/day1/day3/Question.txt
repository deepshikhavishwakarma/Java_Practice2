Ques - 1
-----------------------
Filtering and Mapping:
Write a Java 8 stream pipeline that takes a list
of integers and filters out the even numbers, then
 squares each remaining number, and finally
 prints the result.

Input:
List<Integer> numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
Output:
1
9
25
49
81

Ques - 2
-----------------------
Grouping and Counting:
Given a list of strings, group them by their lengths and
count the number of strings in each group. Print out the
length and count for each group.
Input:
List<String> strings = ["apple", "banana", "orange", "grape", "pear"];
Expected Output:
Length -> Count:
5 -> 2
6 -> 2
4 -> 1

Ques - 3
-------------------
Sorting:
Write a program to sort a list of strings in descending order using Java 8 streams.
Input:
List<String> strings = ["apple", "banana", "orange", "grape", "pear"];
Expected Output:
Sorted Strings in Descending Order:
pear
orange
grape
banana
apple

Ques - 4
----------------
Person Class(BLC): Represents a Person with name,
 age, and gender properties.
Create a ELC class Tester :
List of Persons: An ArrayList of Person objects is
created with different genders(Male/Female).
Group all the Male and Female separately into a Map
 where Gender is the key .
Use forEach over the entries in the Map and prints
each gender group along with the list of persons
 belonging to that gender.

Male:
Person{name= Bob, age=30, gender=Male}
Person{name= Charlie , age=20, gender=Male}
Person{name=David, age=35, gender=Male}
Person{name=Frank, age=22, gender='Male}

Female:
Person{name=Alice, age=25, gender=Female}
Person{name=Eve, age=28, gender=Female}
Person{name=Grace, age=26, gender=Female}

Ques - 5
---------------
Flattening Lists:
Given a list of lists of integers, flatten it into
a single list and then remove duplicates using Java 8
 streams.

Input:
List<List<Integer>> = [[1,2,3],[2,3,4,5],[4,5,6]]
Expected Output:
Flattened List without Duplicates:
1
2
3
4
5
6

Ques - 6
---------------
Given a list of Employee objects, where each employee has a name, salary, and years of experience, write a Java program to increase the salary of employees with more than 5 years of experience by 10%. Use the Stream API to perform this operation and then print all the employees.

Test Input:
Employee("John", 50000, 6));
Employee("Jane", 45000, 4));
Employee("Tom", 60000, 7));
Employee("Lucy", 52000, 5));
Employee("Anna", 48000, 8));

Expected Output:
Employee{name='John', salary=55000.0, yearsOfExperience=6}
Employee{name='Jane', salary=45000.0, yearsOfExperience=4}
Employee{name='Tom', salary=66000.0, yearsOfExperience=7}
Employee{name='Lucy', salary=52000.0, yearsOfExperience=5}
Employee{name='Anna', salary=52800.0, yearsOfExperience=8}

Ques - 8
---------------
Sorting Map:
You are given a HashMap where the keys are strings
and the values are integers. Write a Java program
to sort this HashMap based on its values using the
Stream API. The sorted result should be stored in
a LinkedHashMap to maintain the order of sorting.
Finally, print the sorted HashMap.

Test Case 1:
Map<String, Integer> map = [("A", 10), ("B", 5), ("C", 20), ("D", 15)]
Expected Output:
B -> 5
A -> 10
D -> 15
C -> 20

Test Case 2:
Map<String, Integer> map = [("X", 3), ("Y", 1), ("Z", 2)]
Expected Output:
Y -> 1
Z -> 2
X -> 3

Test Case 3:
Map<String, Integer> map = [("Apple", 50), ("Banana", 30), ("Cherry", 40), ("Date", 10), ("Elderberry", 20)]

Expected Output:
Date -> 10
Elderberry -> 20
Banana -> 30
Cherry -> 40
Apple -> 50

Ques - 9
---------------
Converting List to Map:
You are given a Student record with the following fields:

studentId : (int)
name : (String)
course : (String)
Write a Java program to convert an ArrayList of Student objects into a HashMap, using the studentId attribute as the key by using Stream API.

Test Case 1:

Input:
List of Students: [Student{1, "Alice", "Computer Science"}, Student{2, "Bob", "Mathematics"}, Student{3, "Charlie", "Physics"}]
Expected Output:
ID: 1, Student{studentId=1, name='Alice', course='Computer Science'}
ID: 2, Student{studentId=2, name='Bob', course='Mathematics'}
ID: 3, Student{studentId=3, name='Charlie', course='Physics'}

Test Case 2:
Empty List:

Input:
List of Students: []
Expected Output:
(No output; map is empty)

Ques - 10
---------------
Merging Maps:
Write a Java program to merge two HashMaps into a
single HashMap using the Stream API.
If there are duplicate keys, their values should be summed up.

Test Case 1:
Map<String, Integer> map1 = [("A", 10), ("B", 20), ("C", 30)]

Map<String, Integer> map2 = [("B", 5), ("C", 15), ("D", 25)]

Expected Output:
A -> 10
B -> 25
C -> 45
D -> 25

Test Case 2:

Map<String, Integer> map1 = [("X", 1), ("Y", 2)]

Map<String, Integer> map2 = [("Y", 3), ("Z", 4)]
Expected Output:
X -> 1
Y -> 5
Z -> 4




day 4




