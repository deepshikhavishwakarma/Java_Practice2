Wrapper class and var-Arg with Method Overloading Concept
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
Ques - 1
-----------

public class TestOL {
    public void m1(int a) {
        System.out.println("int");
    }
    public int m1(Integer a) {
        System.out.println("Integer");
        return 0;
    }
    public String m1(int... a) {
        System.out.println("int...");
        return null;
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        int i = 10;
        Integer io = 10;
        t.m1(i);
        t.m1(io);

    }
}
A. Compile time error
B. int
   Integer

C. int
   int

D. int
   int...

E. int
   Integer
   int...

Ans :  B

Ques - 2
------------
public class TestOL {

    public void m1(Integer a) {
        System.out.println("Integer");
    }
    public void m1(Long a) {
        System.out.println("Long");
    }
    public void m1(int... a) {
        System.out.println("int...");
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        byte b = 10;
        Integer io = 10;
        t.m1(b);
        t.m1(io);
    }
}

A. Compile time error
B. Integer
   Integer
C. Integer
   Long
D. int...
   Integer

Ans :

Ques - 3
----------------
public class TestOL {
    public void m1(Integer a) {
        System.out.println("Integer");
    }
    public void m1(Long a) {
        System.out.println("Long");
    }
    public void m1(Integer... a) {
        System.out.println("Integer...");
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        byte b = 10;
        t.m1(b);


    }
}

A. Compile time error
B. Integer
C. Long
D. Integer...

Ans :  A

Ques - 4
------------
public class TestOL {
    public static void m1(char a) {
        System.out.println("char");
    }
        public void m1(float f) {
               System.out.println("float");
        }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        byte b = 10;
        t.m1(b);


    }
}

A. Compile time error
B. char
C. float

Ans : C

Ques - 5
-------------
public class TestOL {
    public static void m1(char a) {
        System.out.println("char");
    }
        public void m1(float f) {
               System.out.println("float");
        }
        public static final void m1(Object obj) {
               System.out.println("Object");
        }
    public static void main(String[] args) {
              TestOL t = new TestOL();
              double d = 10;
              t.m1(d);


    }
}

A. Compile time error
B. char
C. float
D.Object

Ans : D

Ques - 6
-------------
public class TestOL {
    public void m1(Number f) {
        System.out.println("Number");
    }
    public void m1(Long l) {
        System.out.println("Long");
    }
    public void m1(Object l) {
        System.out.println("Object");
    }
    public static void main(String[] args) {
           TestOL t = new TestOL();
           t.m1(null);
    }
}

A. Compile time error
B. Number
C. Long
D. Object

Ans : C

Ques - 7
---------------
public class TestOL {
    public void m1(Integer f) {
        System.out.println("Integer");
    }
    public void m1(String l) {
        System.out.println("String");
    }
    public void m1(Object l) {
        System.out.println("Object");
    }

    public static void main(String[] args) {
        TestOL t = new TestOL();
        t.m1(null);//Integer
        t.m1(9);//Object


    }
}

A. Compile time error
B. Integer
C. String
D. Object

Ans : A

Ques - 8
-------------
public class TestOL {
    public void m1(int... f) {
        System.out.println("int...");
    }
    public void m1(byte b) {
        System.out.println("byte");
    }
    public void m1(Object l) {
        System.out.println("Object");
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        t.m1(null);


    }
}

A. Compile time error
B. int...
C. byte
D. Object

Ans : B

Ques - 9
-------------
public class TestOL {
    public void m1(int... f) {
        System.out.println("int...");
    }
    public void m1(char... b) {
        System.out.println("char...");
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        t.m1();
    }
}
A. Compile time error
B. int...
C. char...
D. No output

Ans :C


Ques - 10
-------------
public class TestOL {
    public void m1(short... f) {
        System.out.println("short...");
    }
    public void m1(char... b) {
        System.out.println("char...");
    }
    public static void main(String[] args) {
        TestOL t = new TestOL();
        t.m1();
    }
}
A. Compile time error
B. short...
C. char...
D. No output

Ans : A

Ques - 11
-------------
public class TestOL {
    public void m1(short... f) {
        System.out.println("short...");
    }
    public void m1(boolean... b) {
        System.out.println("boolean...");
    }
    public static void main(String[] args) {
        Testol t = new Testol();
        t.m1();
    }
}

A. Compile time error
B. short...
C. boolean...
D. No output

Ans : A

Ques - 12
--------------
public class TestOL {
    public void m1(Integer... f) {
        System.out.println("Integer...");
    }
    public void m1(Long... b) {
        System.out.println("Long...");
    }
    public void m1(Object... obj) {
        System.out.println("Object...");
    }
    public static void main(String[] args) {
        Testol t = new Testol();
        t.m1();
    }
}

A. Integer...
B. Long...
C. Object...
D. Compile time error

Ans : D

QUes - 13
--------------
public class TestOL {
    public void m1(Integer i) {
        System.out.println("Integer");
    }
    public void m1(Long l) {
        System.out.println("Long");
    }
    public void m1(Object... obj) {
        System.out.println("Object...");
    }
    public static void main(String[] args) {
        Testol t = new Testol();
        char ch = 'A';
        t.m1(ch);
    }
}

A. Compile time error
B. Long
C. Object...
D. Integer

Ans : C

Ques - 14
------------
class Animal {
       public void eat(Animal b) {
           System.out.println("Animal is eating....");}}
class Lion extends Animal {
     public void eat(Lion l) {
         System.out.println("Lion is eating....");}}
class Cub extends Lion {
     public void eat(Cub c) {
         System.out.println("Cub is eating....");}}
public class TestOL {
    public static void main(String[] args) {
         Animal a = new Cub();//Up Casting
         a.eat(a);
         a.eat((Cub)a);
    }
}

A. Animal is eating
   Cub is eating
B. Animal is eating
   Animal is eating
C. Cub is eating
   Cub is eating
D. Animal is eating
   Lion is eating

Ans : B

Ques - 15
----------
class Animal {
       public void eat(Animal b) {
           System.out.println("Animal is eating...."); }}
class Lion extends Animal {
     public void eat(Lion l) {
         System.out.println("Lion is eating...."); }}
class Cub extends Lion {
     public void eat(Cub c) {
         System.out.println("Cub is eating...."); }}
public class TestOL {
    public static void main(String[] args) {
         Lion a = new Cub();
         a.eat(a);
         new Cub().eat(a);
    }
}

A. Lion is eating
   Lion is eating
B. Animal is eating
   Lion is eating
C. Cub is eating
   Cub is eating
D. Lion is eating
   Cub is eating

Ans :

Ques - 16
-------------
abstract class Poly{
    abstract void  m1(Integer... i) ;
}
class Overload extends Poly{
    @Override
    void m1(Integer[] i) {
          System.out.println("Integer[]");}
    void m1(Number... i) {
        System.out.println("Number...");}
    void m1(Object... i) {
        System.out.println("Object...");}        }
public class TestMCQ7 {
    public static void main(String[] args) {
    Overload o = new Overload();
     int b1=10;
    o.m1(b1,20);



    }
}

A. Integer[]
B. Number...
C. Object...
D. Compilation Error

Ans:  B

Ques - 17
--------------
abstract class Foo {}
class Alpha extends Foo {}
class Beta extends Alpha {}
class Delta extends Beta {
public static void main( String[] args ) {
Beta x = new Beta();
// insert code here       //---line-7
}
}
Which code, inserted at line 7, will cause a java.lang.ClassCastException?
A. Alpha a = x;
B. Foo f = (Delta)x;
C. Foo f = (Alpha)x;
D. Beta b = (Beta)(Alpha)x;

Ans: B

Ques - 18
-------------
1. class Building { }
2.public class Barn extends Building {
3. public static void main(String[] args) {
4. Building build1 = new Building(); //CE
5. Barn barn1 = new Barn();
6. Barn barn2 = (Barn) build1;
7. Object obj1 = (Object) build1;
8. String str1 = (String) build1; //CE
9. Building build2 = (Building) barn1;
10. }
11. }
Which is true?
A. If line 6 is removed, the compilation succeeds.
B. If line 7 is removed, the compilation succeeds.
C. If line 8 is removed, the compilation succeeds.
D. If line 9 is removed, the compilation succeeds.
E. More than one line must be removed for compilation to succeed.

Ans:
Ques - 19
--------------
Which method declarations, when inserted at (7), will not result in a compile-time
error?

class MySuperclass {
 public Integer step1(int i) { return 1; }                         // (1)
 protected String step2(String str1, String str2) { return str1; } // (2)
 public String step2(String str1) { return str1; }                 // (3)
 public static String step2() { return "Hi"; }                     // (4)
 public MyClass makeIt() { return new MyClass(); }                 // (5)
 public MySuperclass makeIt2() { return new MyClass(); }           // (6)
}
public class MyClass extends MySuperclass {
  public MyClass makeIt2() { return new MyClass(); }



 }
Select the two correct answers.
(a) public int step1(int i) { return 1; }
(b) public String step2(String str2, String str1) { return str1; }
(c) private void step2() { }
(d) private static void step2() { }
(e) private static String step2(String str) { return str; }
(f) public MySuperclass makeIt() { return new MySuperclass(); }
(g) public MyClass makeIt2() { return new MyClass(); }

(a) abg
(b) dg
(c) b
(d) bfg
(e) bg

Ans :

Ques - 20
------------
Which is the simplest expression that can be inserted at (1), so that the program prints the value of the text field from the Message class?
class Message { // The message that should be printed:
 String text = "Hello, world!";}
class MySuperclass {
 Message msg = new Message();}
public class MyClass extends MySuperclass {
 public static void main(String[] args) {
 MyClass object = new MyClass();
 object.print();
 }
 public void print() {
 System.out.println( /* (1) INSERT THE SIMPLEST EXPRESSION HERE */ );}
}Select the one correct answer.
(a) Message.text
(b) msg.text
(c) object.msg.text
(d) super.msg.text
(e) object.super.msg.text

Ans :