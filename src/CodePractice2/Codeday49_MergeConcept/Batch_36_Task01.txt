Que-1
________________
You are given a multi-threaded Java program that simulates a producer-consumer problem using inter-thread communication. The program consists of the following:

Factory: A shared resource that manages the production and consumption of items. It has two synchronized methods:

produce(int item): Increases the number of items and notifies the consumer thread once items are produced.
consume(int item): Decreases the number of items and notifies the producer thread once items are consumed.
Producer: A thread that produces a series of items (from 1 to 10) by calling the produce() method.

Consumer: A thread that consumes a series of items (from 1 to 10) by calling the consume() method.

MultiThreadEnv: The main class that creates a Factory, a Producer, and a Consumer to simulate the interaction between the two.

Tasks:
Write a multi-threaded Java program using synchronized methods and inter-thread communication (wait() and notify()) to manage the interaction between a producer and a consumer.
Ensure that the producer thread waits when the factory is full and notifies the consumer thread once items are produced.
Ensure that the consumer thread waits when there are no items and notifies the producer thread once items are consumed.
Sample Output:

The producer had produced the items as 1
The consumer had consumed the items as 1
The producer had produced the items as 2
The consumer had consumed the items as 2
---- so on
------------------------------------------------------------------------------------------------
Que-2
__________________
A class called Customer is given to you. 
The task is to find the Applicable Credit card Type and create CardType object based on the Credit Points of a customer.

Define the following for the class.

Attributes : 
	customerName : String,private
	creditPoints: int,private

Constructor :
	parameterizedConstructor: for both cusotmerName & creditPoints in that order.

Methods :
	Name of the method : getCreditPoints
	Return Type : int
	Modifier   : public 
	Task : This must return creditPoints
	
	Name of the method : toString -OverRide it, 
	Return type : String 
	Task :  return only customerName from this.

Create another class called CardType. Define the following for the class

Attributes :
	customer : Customer, private
	cardType : String, private
Constructor :
	parameterizedConstructor: for customer and cardType attributes in that order

Methods :
	Name of the method : toString  Override this.  
	Return type : String
	Modifier : private
	Task :  Return the string in the following format.
		The Customer 'Rajeev' Is Eligible For 'Gold' Card.


Create One more class by name CardsOnOffer and define the following for the class.

Method : 
	Name Of the method : getOfferedCard 
	Return type : CardType
	Modifiers: public,static
	Arguments: Customer object
	Task : 	Create and return a CardType object after logically finding Grade from creditPoints as per the below rules.
		Marks	 	Grade
		100  - 500   -   Silver
		501  - 1000  -   Gold
		1001 >       -   Platinum
		< 100        -   EMI
		
Code a Main class to test the working of the above.
